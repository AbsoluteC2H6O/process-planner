{"version":3,"sources":["Components/Home.js","Components/DataAleatoria.js","Components/Timer.js","Components/Fcfs.js","Components/Sjf.js","Components/Rr.js","Components/TableData.js","Components/AppBar3.js","Components/Board.js","Redux/reducers.js","Redux/dataselected.js","Redux/datalisto.js","Redux/databloqueado.js","Redux/systemdata.js","Redux/redux/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Typography","variant","component","paragraph","List","ListItem","ListItemText","primary","secondary","MuiVirtualizedTable","getRowClassName","index","props","classes","onRowClick","clsx","tableRow","flexContainer","tableRowHover","cellRenderer","cellData","columnIndex","columns","rowHeight","TableCell","className","tableCell","noClick","style","height","align","numeric","headerRenderer","label","headerHeight","this","tableProps","width","gridStyle","direction","table","rowClassName","map","dataKey","other","headerProps","React","PureComponent","defaultProps","VirtualizedTable","withStyles","theme","display","alignItems","boxSizing","flip","paddingRight","undefined","cursor","backgroundColor","palette","grey","flex","paper","padding","spacing","textAlign","color","text","modal","justifyContent","paper2","background","border","boxShadow","shadows","sample","createData","id","processName","waitTime","ejecutionTime","bloquedTime","comingTime","ejecTime","rows","i","con1","Math","floor","random","con2","con3","con4","push","randomSelection","length","getWindowDimensions","window","innerWidth","innerHeight","DataAleatoria","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","dispatch","useDispatch","type","payload","Grid","container","item","sm","xs","md","marginLeft","marginRight","Paper","rowCount","rowGetter","makeStyles","root","flexGrow","paper3","useStyles","queueL","queueC","queueT","selectedProcessE","count1","count2","Fcfs","dataselected","useSelector","state","option","setOption","option2","setOption2","time","setTime","start","setStart","startOp","progress","setProgress","selectedProcess","ejec","setEjec","timer","setInterval","n100","uno_a_tres","queueAux","queueAux2","filter","queuec","shift","console","log","prevProgress","prevTime","clearInterval","Button","onClick","marginTop","marginBottom","setTimeout","heigh","promedio","toFixed","promedioEspera","Card","CardActionArea","CardContent","gutterBottom","CardActions","Divider","CircularProgress","Ejecucion","terminados","Listos","menor","position","aux3","aux2","queuel","quantum","setQuantum","handleButton4","TextField","pattern","onChange","event","target","value","disabled","fontWeight","drawerWidth","algorithm","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","contentShift","PersistentDrawerLeft","useTheme","open","setOpen","selectedIndex","setSelectedIndex","handleListItemClick","CssBaseline","AppBar","Toolbar","IconButton","edge","noWrap","Drawer","anchor","button","selected","ListItemIcon","Board","combineReducers","Dataselected","action","datalisto","Datalisto","databloqueado","Databloqueado","systemdata","Systemdata","persistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","store","createStore","persistor","persistStore","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1638e916.chunk.js","sourcesContent":["//import \"./App.css\";\n//import { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport List from \"@material-ui/core/List\";\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     display: \"flex\",\n//   },\n// }));\nexport default function Home() {\n  // const classes = useStyles();\n  // const theme = useTheme();\n\n  return (\n    <>\n      <Typography variant=\"h5\" component=\"h2\">\n        Algoritmos de planificación de procesos\n      </Typography>\n      <Typography paragraph></Typography>\n      <Typography paragraph>\n        Los algoritmos de planificacion existen debido a la necesidad de ganar\n        eficiencia en la direccion de procesos del computador y el uso optimo\n        del CPU. Algunos conceptos y aspectos a tener en cuenta son:\n      </Typography>\n      <List>\n        <ListItem>\n        <ListItemText\n            primary={\"-Tiempo de espera (Tw)\"}\n            secondary={\n              \"l tiempo que un proceso permanece en espera en la cola de ejecución.\"\n            }\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={\"-Tiempo de retorno o de ejecucion (Te)\"}\n            secondary={\n              \"Tiempo que va desde que se lanza un proceso hasta que finaliza.\"\n            }\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={\"-Tiempo de respuesta o de bloqueo (Tb)\"}\n            secondary={\n              \"Por último éste se define a el tiempo que un proceso bloqueado tarda en entrar en ejecución.\"\n            }\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={\"-Uso de CPU\"}\n            secondary={\"Porcentaje de tiempo que la CPU está ocupada.\"}\n          />\n        </ListItem>\n        <ListItem>\n          <ListItemText\n            primary={\"-Productividad\"}\n            secondary={\n              \" Número de procesos realizados en una unidad de tiempo.\"\n            }\n          />\n        </ListItem>\n     \n\n\n      </List>\n      <Typography variant=\"h6\" component=\"h2\">\n        Nota importante\n      </Typography>\n      <Typography paragraph>\n       Existe una data pseudoaleatoria para la simulacion. El algoritmo emplea una funcion de dsitribucion normal, en la que la llegada de un nuevo\n        procesos tiene una probabilidad de 25%.\n      </Typography>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { AutoSizer, Column, Table } from \"react-virtualized\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useDispatch } from \"react-redux\";\nconst styles = (theme) => ({\n  flexContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    boxSizing: \"border-box\",\n  },\n  table: {\n    \"& .ReactVirtualized__Table__headerRow\": {\n      flip: false,\n      paddingRight: theme.direction === \"rtl\" ? \"0 !important\" : undefined,\n    },\n  },\n  tableRow: {\n    cursor: \"pointer\",\n  },\n  tableRowHover: {\n    \"&:hover\": {\n      backgroundColor: theme.palette.grey[200],\n    },\n  },\n  tableCell: {\n    flex: 1,\n  },\n  noClick: {\n    cursor: \"initial\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n});\n\nclass MuiVirtualizedTable extends React.PureComponent {\n  static defaultProps = {\n    headerHeight: 48,\n    rowHeight: 48,\n  };\n\n  getRowClassName = ({ index }) => {\n    const { classes, onRowClick } = this.props;\n\n    return clsx(classes.tableRow, classes.flexContainer, {\n      [classes.tableRowHover]: index !== -1 && onRowClick != null,\n    });\n  };\n\n  cellRenderer = ({ cellData, columnIndex }) => {\n    const { columns, classes, rowHeight, onRowClick } = this.props;\n    return (\n      <TableCell\n        component=\"div\"\n        className={clsx(classes.tableCell, classes.flexContainer, {\n          [classes.noClick]: onRowClick == null,\n        })}\n        variant=\"body\"\n        style={{ height: rowHeight }}\n        align={\n          (columnIndex != null && columns[columnIndex].numeric) || false\n            ? \"right\"\n            : \"left\"\n        }\n      >\n        {cellData}\n      </TableCell>\n    );\n  };\n\n  headerRenderer = ({ label, columnIndex }) => {\n    const { headerHeight, columns, classes } = this.props;\n\n    return (\n      <TableCell\n        component=\"div\"\n        className={clsx(\n          classes.tableCell,\n          classes.flexContainer,\n          classes.noClick\n        )}\n        variant=\"head\"\n        style={{ height: headerHeight }}\n        align={columns[columnIndex].numeric || false ? \"right\" : \"left\"}\n      >\n        <span>{label}</span>\n      </TableCell>\n    );\n  };\n\n  render() {\n    const { classes, columns, rowHeight, headerHeight, ...tableProps } =\n      this.props;\n    return (\n      <AutoSizer>\n        {({ height, width }) => (\n          <Table\n            height={height}\n            width={width}\n            rowHeight={rowHeight}\n            gridStyle={{\n              direction: \"inherit\",\n            }}\n            headerHeight={headerHeight}\n            className={classes.table}\n            {...tableProps}\n            rowClassName={this.getRowClassName}\n          >\n            {columns.map(({ dataKey, ...other }, index) => {\n              return (\n                <Column\n                  key={dataKey}\n                  headerRenderer={(headerProps) =>\n                    this.headerRenderer({\n                      ...headerProps,\n                      columnIndex: index,\n                    })\n                  }\n                  className={classes.flexContainer}\n                  cellRenderer={this.cellRenderer}\n                  dataKey={dataKey}\n                  {...other}\n                />\n              );\n            })}\n          </Table>\n        )}\n      </AutoSizer>\n    );\n  }\n}\n\nMuiVirtualizedTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      dataKey: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      numeric: PropTypes.bool,\n      width: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  headerHeight: PropTypes.number,\n  onRowClick: PropTypes.func,\n  rowHeight: PropTypes.number,\n};\n\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\n\n// ---\n\n// const sample = [\n//   [\"P\", 4, 4, 10, 4],\n//   [\"P\", 8, 8, 10, 6],\n//   [\"P\", 9, 9, 1, 10],\n//   [\"P\", 2, 1, 3, 12],\n//   [\"P\", 3, 2, 5, 14],\n//   [\"P\", 5, 3, 5, 16],\n//   [\"P\", 12, 4, 10, 18],\n//   [\"P\", 15, 4, 6, 4],\n//   [\"P\", 17, 8, 3, 6],\n//   [\"P\", 19, 9, 1, 10],\n//   [\"P\", 1, 1, 10, 12],\n//   [\"P\", 3, 2, 20, 14],\n//   [\"P\", 5, 3, 10, 16],\n//   [\"P\", 5, 4, 10, 18],\n// ];\nconst sample = [];\nfunction createData(\n  id,\n  processName,\n  waitTime,\n  ejecutionTime,\n  bloquedTime,\n  comingTime,\n  ejecTime\n) {\n  return { id, processName, waitTime, ejecutionTime, bloquedTime, comingTime,ejecTime };\n}\n\nconst rows = [];\nconst min = 1;\nconst max = 10;\n\nfor (let i = 0; i < 20; i += 1) {\n  let con1 = Math.floor(Math.random() * (max - min)) + min;\n  let con2 = Math.floor(Math.random() * (max - min)) + min;\n  let con3 = Math.floor(Math.random() * (max - min)) + min;\n  let con4 = Math.floor(Math.random() * (max - min)) + min;\n  let con5 = 0;\n  sample.push([`P${i+1}`, con1, con2, con3, con4,con5]);\n}\n\nfor (let i = 0; i < 10; i += 1) {\n  const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n\n  rows.push(createData(i, ...randomSelection));\n}\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\nexport default function DataAleatoria() {\n  const { height, width } = useWindowDimensions();\n  //const classes = useStyles();\n\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    // let data=\n    // {\n    //   data: rows,\n    // }\n    dispatch({ type: \"dataselected\", payload: rows });\n  }, []);\n\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item sm={1} xs={1} md={1}></Grid>\n        <Grid item sm={6} xs={6} md={6}>\n          <Typography\n            style={{\n              width: width * 0.5,\n              marginLeft: width * 0.1,\n              marginRight: width * 0.1,\n            }}\n            variant=\"h6\"\n            component=\"h2\"\n          >\n            Data Aleatoria para simular\n          </Typography>\n          <Typography paragraph></Typography>\n          <Paper\n            style={{\n              height: height - 400,\n              width: width * 0.5,\n              marginLeft: width * 0.1,\n              marginRight: width * 0.1,\n            }}\n          >\n            <VirtualizedTable\n              rowCount={rows.length}\n              rowGetter={({ index }) => rows[index]}\n              columns={[\n                {\n                  width: width * 0.25,\n                  label: \"Nombre\",\n                  dataKey: \"processName\",\n                },\n                {\n                  width: width * 0.25,\n                  label: \"Tiempo de espera\",\n                  dataKey: \"waitTime\",\n                  numeric: true,\n                },\n                {\n                  width: width * 0.25,\n                  label: \"Tiempo de ejecucion\",\n                  dataKey: \"ejecutionTime\",\n                  numeric: true,\n                },\n                {\n                  width: width * 0.258,\n                  label: \"Tiempo de bloqueo\",\n                  dataKey: \"bloquedTime\",\n                  numeric: true,\n                },\n                {\n                  width: width * 0.25,\n                  label: \"Tiempo de llegada\",\n                  dataKey: \"comingTime\",\n                  numeric: true,\n                },\n              ]}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","//import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    height: 200,\n  },\n  paper3: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #000\",\n    boxShadow: theme.shadows[6],\n    padding: theme.spacing(2, 4, 3),\n    height: 20,\n  },\n}));\n\nexport default function Timer(props) {\n  const classes = useStyles();\n  //   const [option, setOption] = useState(0);\n\n  //   const [time, setTime] = useState(0);\n  //   const [start, setStart] = useState(false);\n\n  //   const [progress, setProgress] = React.useState(0);\n  //   const handleButton1 = () => {\n  //     queueC = dataselected;\n  //     setTimeout(() => {\n  //       //setTime(time+1);\n\n  //       setOption(1);\n  //     }, 800);\n  //   };\n  //   const handleButton2 = () => {\n  //     setOption(2);\n  //   };\n\n  React.useEffect(() => {\n    if (props.start === true) {\n      const timer = setInterval(() => {\n        // setTime(time + 1);\n        props.setTime(props.time + 1);\n        //setProgress2((prevProgress2) => (prevProgress2 >= selectedProcess ? 0 : prevProgress2 + selectedProcess*0.1));\n        if (props.start === false) {\n          props.setTime(0);\n        }\n      }, 1000);\n\n    return () => {\n        clearInterval(timer);\n      };\n    }\n\n  }, []);\n\n  return (\n    <>\n      <Paper className={classes.paper}>\n        Contadorde tiempo/ Proceso en ejecucion\n      </Paper>\n      <Paper className={classes.paper3}>\n        <Typography variant=\"h6\" component=\"h2\">\n          {props.time}\n        </Typography>\n      </Paper>\n    </>\n  );\n}\n","//import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataAleatoria from \"../Components/DataAleatoria\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n// import Modal from \"@material-ui/core/Modal\";\n// import Backdrop from \"@material-ui/core/Backdrop\";\n// import Fade from \"@material-ui/core/Fade\";\n// import TextField from \"@material-ui/core/TextField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport AdjustIcon from \"@material-ui/icons/Adjust\";\nimport Timer from \"../Components/Timer\";\nimport OfflinePinSharpIcon from \"@material-ui/icons/OfflinePinSharp\";\n//import CircularProgress from '@material-ui/core/CircularProgress';\n//import DeleteIcon from \"@material-ui/icons/Delete\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    height: 200,\n  },\n  paper3: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #000\",\n    boxShadow: theme.shadows[6],\n    padding: theme.spacing(2, 4, 3),\n    height: 15,\n  },\n}));\nlet queueB = [];\nlet queueL = [];\nlet queueC = [];\nlet queueT = [];\n\n// let selectedProcessE = {\n//   processName: \"\",\n//   comingTime: 0,\n//   ejecutionTime: 0,\n//   bloquedTime: 0,\n//   waitTime: 0,\n// };\nlet selectedProcessE = null;\nlet positionP = 0;\nlet count1 = 0;\nlet count2 = 0;\nlet count3 = 0;\nlet count4 = 0;\nlet i=10;\nlet sample = [];\nexport default function Fcfs() {\n  const classes = useStyles();\n  // const theme = useTheme();\n  const dataselected = useSelector((state) => state.dataselected);\n  const [option, setOption] = useState(0);\n  const [option2, setOption2] = useState(0);\n  const [option3, setOption3] = useState(0);\n  const [option4, setOption4] = useState(0);\n  const [time, setTime] = React.useState(0);\n  const [start, setStart] = useState(false);\n  const [startOp, setStartOp] = useState(true);\n  const [progress, setProgress] = React.useState(0);\n  const [progress2, setProgress2] = React.useState(0);\n  const [list, setList] = useState([]);\n  const [selectedProcess, setSelectedProcess] = React.useState(12);\n  const [ejec, setEjec] = useState(false);\n  // console.log(\"dataselected\", dataselected);\n  // dataselected.map((item,index)=>{\n  //   console.log(\"item\",item);\n  // })\n\n  const handleButton1 = () => {\n    queueC = dataselected;\n    setTimeout(() => {\n      //setTime(time+1);\n\n      setOption(1);\n    }, 800);\n  };\n  const handleButton2 = () => {\n    setOption(2);\n  };\n\n  const handleButton4 = () => {\n    setStart(true);\n    // setStartOp(false);\n    // setTimeout(() => {\n    //   //setTime(time+1);\n    //   setStartOp(true);\n    // }, 500);\n    // setTime(time + 1);\n    // setProgress((prevProgress) =>\n    //   prevProgress >= selectedProcess ? 0 : prevProgress + 1\n    // );\n    //setProgress2((prevProgress2) => (prevProgress2 >= selectedProcess ? 0 : prevProgress2 + selectedProcess*0.1));\n    // if (setProgress === 0) {\n    //   setSelectedProcess(null);\n    // }\n\n    // const timer = setInterval(() => {\n    //   setTime(time+1);\n    // }, 1000);\n\n    // clearInterval(timer);\n  };\n  const handleButton5 = () => {\n    setStart(false);\n    setTime(0);\n    count1 = 0;\n    count2 = 0;\n    count3 = 0;\n    count4 = 0;\n    setOption2(1);\n\n    queueC = dataselected;\n    queueL = [];\n    queueB = [];\n    queueT = [];\n    selectedProcessE = null;\n    setEjec(false);\n    setTimeout(() => {\n      //setTime(time+1);\n      setOption2(0);\n      // queueL = dataselected;\n      //queueB= dataselected\n    }, 800);\n\n    //\n  };\n  const min = 1;\n  const max = 10;\n  // const min2 = 20;\n  // const max2 = 100;\n  function uno_a_tres() {\n    let n3=0;\n    // sea n100 un número del 1 al 100 y n3 el resultado de tu función\n    var n100 = Math.floor(Math.random() * 100 + 1);\n\n    if (n100 <= 25) {\n      n3 = 1;\n    } else if (n100 <= 75) {\n      n3 = 2;\n    } else {\n      n3 = 3;\n    }\n    return n3;\n  }\n  function promedioEspera() {\n    let promedio = 0;\n    queueC.map((item,index)=>{\n      promedio+=item.waitTime-time;\n    });\n    if(queueC.length ===0){\n      return 0;\n    }else{\n      return (promedio/queueC.length).toFixed(2);\n    }\n    \n  }\n  function Listos() {\n    let promedio = 0;\n    queueL.map((item,index)=>{\n      promedio+=item.waitTime;\n    });\n    if(queueL.length ===0){\n      return 0;\n    }else{\n      return (promedio/queueL.length).toFixed(2);\n    }\n    \n  }\n  function bloqueo() {\n    let promedio = 0;\n    queueB.map((item,index)=>{\n      promedio+=item.waitTime;\n    });\n    if(queueB.length ===0){\n      return 0;\n    }else{\n      return( promedio/queueB.length).toFixed(2);\n    }\n   \n  }\n  function nuevosProcesos() {\n    let promedio = 0;\n    queueC.map((item,index)=>{\n      promedio+=item.waitTime;\n    });\n    if(queueC.length ===0){\n      return 0;\n    }else{\n      return (promedio/queueC.length -2,5).toFixed(2);\n    }\n   \n  }\n  function terminados() {\n    let promedio = 0;\n    queueT.map((item,index)=>{\n      promedio+=item.waitTime;\n    });\n    if(queueT.length ===0){\n      return 0;\n    }else{\n      return (promedio/queueT.length).toFixed(2);\n    }\n   \n  }\n  function Ejecucion() {\n    let promedio = 0;\n    queueT.map((item,index)=>{\n      promedio+=item.ejecutionTime;\n    });\n    if(queueT.length ===0){\n      return 0;\n    }else{\n      return (promedio/queueT.length).toFixed(2);\n    }\n   \n  }\n\n  function createData(\n    id,\n    processName,\n    waitTime,\n    ejecutionTime,\n    bloquedTime,\n    comingTime\n  ) {\n    return { id, processName, waitTime, ejecutionTime, bloquedTime, comingTime };\n  }\n  React.useEffect(() => {\n    // queueC = dataselected;\n    if (start === true) {\n      const timer = setInterval(() => {\n \n        let prob = uno_a_tres();\n        if (prob ===1) {\n          let con2 = Math.floor(Math.random() * (max - min)) + min;\n          let con1 = Math.floor(Math.random() * (count1+10 - count1+3)) + count1+2;\n          let con3 = Math.floor(Math.random() * (max - min)) + min;\n          let con4 = Math.floor(Math.random() * (max - min)) + min;\n          i+=1;\n          sample.push([`P${queueC.length+1}`, con1, con2, con3, con4]);\n          queueC.push(createData(queueC.length, ...sample[0]));\n          sample=[];\n        }\n\n        if (queueC.length > 0) {\n          let queueAux = [];\n          let queueAux2 = [];\n          //  setData(noverades?.data.filter((item) => item.id != deleteId));\n          //   setList(queueC?.filter((item) => item.waitTime === count1));\n          ///  console.log(\" antes de asignar queueC\", queueC.length,\"queueuAux\", queueAux.length,\"queue L\", queueL.length,\"queueuAux 2\", queueAux2.length,);\n\n          queueAux = queueC.filter((queuec) => queuec.waitTime !== count1);\n          queueAux2 = queueC.filter((queuec) => queuec.waitTime === count1);\n          queueC = queueAux;\n\n          //  queueL+=queueAux;\n          queueAux2.map((item, index) => {\n            // console.log(\"entre a map\");\n            queueL.push(item);\n          });\n\n          //  console.log(\"queueC\", queueC.length,\"queueuAux\", queueAux.length,\"queue L\", queueL.length,\"queueuAux 2\", queueAux2.length,);\n        }\n\n        if (queueL.length > 0) {\n          // console.log(\"entre a guardar sele\",ejec,selectedProcessE);\n          if (selectedProcessE === null) {\n            setEjec(true);\n            count2=0;\n            setProgress(0);\n            selectedProcessE = queueL.shift();\n            console.log(\"entro aca\", ejec);\n          }\n        }\n\n        count1 += 1;\n\n        if (selectedProcessE !== null) {\n          if (count2 <= selectedProcessE.ejecutionTime) {\n            count2 += 1;\n          }\n          setProgress((prevProgress) =>\n            prevProgress > selectedProcessE.ejecutionTime ? 0 : prevProgress + 1\n          );\n        }\n        //   setProgress2((prevProgress2) => (prevProgress2 >= selectedProcess ? 0 : prevProgress2 + selectedProcess*0.1));\n        // if (progress === 0) {\n        //   setSelectedProcess(null);\n        // }\n\n        setTime((prevTime) => prevTime + 1);\n        // console.log(\"count1\", count1);\n        // console.log(selectedProcessE.processName,\"times ejecution\",selectedProcessE.ejecutionTime,\"progress\",progress,\"time\",time);\n        if (selectedProcess !== null) {\n          // console.log(\"selectedejection/count2\",selectedProcessE.ejecutionTime,count2);\n          if (count2 === selectedProcessE?.ejecutionTime) {\n            //positionP +=1;\n            //  console.log(\"entre 1\", queueL, selectedProcessE);\n\n            count2 = 0;\n            if (queueL.length > 0) {\n              //   setStartOp(false);\n              queueT.push(selectedProcessE);\n              // console.log(\"saque de cola\")\n              selectedProcessE = queueL.shift();\n              setProgress(0);\n          \n            } else {\n              setProgress(0);\n              queueT.push(selectedProcessE);\n              selectedProcessE = null;\n              count2 = 0;\n              setProgress(0);\n              setEjec(false);\n            }\n          }\n        }\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n\n  }, [start]);\n\n  return (\n    <>\n      {option !== 0 && (\n        <>\n          {\" \"}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton4}\n            style={{\n              width: 250,\n              marginTop: 0,\n              marginLeft: 0,\n              marginBottom: 10,\n            }}\n          >\n            Comenzar simulacion\n            <PlayCircleOutlineIcon />\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton5}\n            style={{\n              width: 250,\n              marginTop: 0,\n              marginLeft: 80,\n              marginBottom: 10,\n            }}\n          >\n            Detener simulacion\n            <StopIcon />\n          </Button>\n        </>\n      )}\n      {option === 0 && (\n        <>\n          {\" \"}\n          <Typography variant=\"h6\" component=\"h2\">\n            Algoritmo FCFS (Primero en venir es el primero en servirse)\n          </Typography>\n          <Typography paragraph></Typography>\n          <Typography paragraph>\n            También llamado FIFO (del inglés First In, First Out). Este\n            algoritmo es muy sencillo y simple, pero también el que menos\n            rendimiento ofrece, básicamente en este algoritmo el primer proceso\n            que llega se ejecuta y una vez terminado se ejecuta el siguiente.{\" \"}\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton1}\n            style={{\n              width: 170,\n              marginTop: 30,\n              marginLeft: 100,\n              marginBottom: 10,\n            }}\n          >\n            Cargar data aleatoria\n          </Button>\n\n        </>\n      )}\n      {option === 0 && <DataAleatoria />}\n\n\n      {option === 1 && (\n        <Grid container spacing={2}>\n          <Grid item sm={3} xs={3} md={3} style={{ heigh: 1000 }}>\n            <Paper className={classes.paper}>Cola procesos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueC.length}{\"      \"}\n                Promedio: {promedioEspera()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueC.length > 0 &&\n                    queueC.map((item, index) => (\n                      <>\n                        <>\n                          {\" \"}\n                          <Card key={item.id} className={classes.root}>\n                            <CardActionArea>\n                              <CardContent>\n                                <Typography\n                                  gutterBottom\n                                  variant=\"h5\"\n                                  component=\"h2\"\n                                >\n                                  {item.processName}\n                                </Typography>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  color=\"textSecondary\"\n                                  component=\"p\"\n                                >\n                                  Tb: {item.bloquedTime}\n                                  {\"     \"}\n                                  Te: {item?.waitTime}\n                                  {/* {\"      \"}\n                                  Te: {item.ejecutionTime} */}\n                                  {\"     \"}\n                                  Tc: {item.comingTime}\n                                </Typography>\n                              </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                         \n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                Tw: {item.waitTime}  \n                              </Paper>\n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                T transcurrido: {time}\n                              </Paper>\n                            </CardActions>\n                          </Card>\n                          <Divider />\n                        </>\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n          <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Contadorde tiempo</Paper>\n\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                {time}\n              </Typography>\n            </Paper>\n            {selectedProcessE !== null && (\n              <>\n                {\" \"}\n                <Paper className={classes.paper}>\n                  <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                    Proceso en ejecucion{selectedProcessE.processName}{\"    \"}\n                    Promedio: {Ejecucion()}\n                  </Typography>\n                </Paper>\n                <Divider />\n              </>\n            )}\n\n    \n            <Card className={classes.root}>\n              {startOp && selectedProcessE !== null ? (\n                <>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {selectedProcessE.processName}\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        Tb: {selectedProcessE.bloquedTime}\n                        {\"     \"}\n                        Tw: {selectedProcessE.waitTime}\n                        {\"      \"}\n                        Te: {selectedProcessE.ejecutionTime}\n                        {\"     \"}\n                        Tc: {selectedProcessE.comingTime}\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>{\" \"}\n                  <CardActions>\n                    {/* <Button size=\"small\" color=\"primary\">\n                      <BlockIcon />\n                      Bloquear\n                    </Button> */}\n                    <Paper className={classes.paper3}>\n                      {\" \"}\n                      {progress}/{selectedProcessE.ejecutionTime}\n                    </Paper>\n                  </CardActions>\n                </>\n              ) : (\n                <></>\n              )}\n            </Card>\n            <Divider />\n\n            <Paper className={classes.paper}>\n              <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                Terminados {queueT.length}{\"       \"}\n                Promedio: {terminados()}\n              </Typography>\n            </Paper>\n            <Divider />\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueT.length > 0 &&\n                    queueT.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n\n          <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Cola listos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueL.length}{\"      \"}\n                Promedio: {Listos()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueL.length > 0 &&\n                    queueL.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                                <OfflinePinSharpIcon />\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                          <CardActions>\n                        \n                          </CardActions>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n","\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataAleatoria from \"../Components/DataAleatoria\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport AdjustIcon from \"@material-ui/icons/Adjust\";\nimport Timer from \"../Components/Timer\";\nimport OfflinePinSharpIcon from \"@material-ui/icons/OfflinePinSharp\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    height: 200,\n  },\n  paper3: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #000\",\n    boxShadow: theme.shadows[6],\n    padding: theme.spacing(2, 4, 3),\n    height: 15,\n  },\n}));\nlet queueB = [];\nlet queueL = [];\nlet queueC = [];\nlet queueT = [];\n\n\nlet selectedProcessE = null;\nlet positionP = 0;\nlet count1 = 0;\nlet count2 = 0;\nlet count3 = 0;\nlet count4 = 0;\nlet i = 11;\nlet sample = [];\nexport default function Fcfs() {\n  const classes = useStyles();\n  // const theme = useTheme();\n  const dataselected = useSelector((state) => state.dataselected);\n  const [option, setOption] = useState(0);\n  const [option2, setOption2] = useState(0);\n  const [option3, setOption3] = useState(0);\n  const [option4, setOption4] = useState(0);\n  const [time, setTime] = React.useState(0);\n  const [start, setStart] = useState(false);\n  const [startOp, setStartOp] = useState(true);\n  const [progress, setProgress] = React.useState(0);\n  const [progress2, setProgress2] = React.useState(0);\n  const [list, setList] = useState([]);\n  const [selectedProcess, setSelectedProcess] = React.useState(12);\n  const [ejec, setEjec] = useState(false);\n\n\n  const handleButton1 = () => {\n    queueC = dataselected;\n    setTimeout(() => {\n      //setTime(time+1);\n\n      setOption(1);\n    }, 800);\n  };\n  const handleButton2 = () => {\n    setOption(2);\n  };\n\n  const handleButton4 = () => {\n    setStart(true);\n\n  };\n  const handleButton5 = () => {\n    setStart(false);\n    setTime(0);\n    count1 = 0;\n    count2 = 0;\n    count3 = 0;\n    count4 = 0;\n    setOption2(1);\n\n    queueC = dataselected;\n    queueL = [];\n    queueB = [];\n    queueT = [];\n    selectedProcessE = null;\n    setEjec(false);\n    setTimeout(() => {\n      //setTime(time+1);\n      setOption2(0);\n      // queueL = dataselected;\n      //queueB= dataselected\n    }, 800);\n\n    //\n  };\n  const min = 1;\n  const max = 10;\n  // const min2 = 20;\n  // const max2 = 100;\n  function uno_a_tres() {\n    let n3 = 0;\n    // sea n100 un número del 1 al 100 y n3 el resultado de tu función\n    var n100 = Math.floor(Math.random() * 100 + 1);\n\n    if (n100 <= 25) {\n      n3 = 1;\n    } else if (n100 <= 75) {\n      n3 = 2;\n    } else {\n      n3 = 3;\n    }\n    return n3;\n  }\n  function promedioEspera() {\n    let promedio = 0;\n    queueC.map((item, index) => {\n      promedio += item.waitTime - time;\n    });\n    if (queueC.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueC.length).toFixed(2);\n    }\n  }\n  function Listos() {\n    let promedio = 0;\n    queueL.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueL.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueL.length).toFixed(2);\n    }\n  }\n  function bloqueo() {\n    let promedio = 0;\n    queueB.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueB.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueB.length).toFixed(2);\n    }\n  }\n  function nuevosProcesos() {\n    let promedio = 0;\n    queueC.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueC.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueC.length - 2, 5).toFixed(2);\n    }\n  }\n  function terminados() {\n    let promedio = 0;\n    queueT.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueT.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueT.length).toFixed(2);\n    }\n  }\n  function Ejecucion() {\n    let promedio = 0;\n    queueT.map((item, index) => {\n      promedio += item.ejecutionTime;\n    });\n    if (queueT.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueT.length).toFixed(2);\n    }\n  }\n\n  function createData(\n    id,\n    processName,\n    waitTime,\n    ejecutionTime,\n    bloquedTime,\n    comingTime\n  ) {\n    return {\n      id,\n      processName,\n      waitTime,\n      ejecutionTime,\n      bloquedTime,\n      comingTime,\n    };\n  }\n  React.useEffect(() => {\n    if (start === true) {\n      const timer = setInterval(() => {\n\n        let prob = uno_a_tres();\n        if (prob === 1) {\n          let con2 = Math.floor(Math.random() * (max - min)) + min;\n          let con1 =\n            Math.floor(Math.random() * (count1 + 10 - count1 + 3)) + count1 + 2;\n          let con3 = Math.floor(Math.random() * (max - min)) + min;\n          let con4 = Math.floor(Math.random() * (max - min)) + min;\n          i += 1;\n          sample.push([`P${i+ 1}`, con1, con2, con3, con4]);\n          queueC.push(createData(queueC.length, ...sample[0]));\n          sample = [];\n        }\n\n        if (queueC.length > 0) {\n          let queueAux = [];\n          let queueAux2 = [];\n \n          queueAux = queueC.filter((queuec) => queuec.waitTime !== count1);\n          queueAux2 = queueC.filter((queuec) => queuec.waitTime === count1);\n          queueC = queueAux;\n\n         \n          queueAux2.map((item, index) => {\n            // console.log(\"entre a map\");\n            queueL.push(item);\n          });\n\n     }\n        if(selectedProcessE ===undefined){\n          selectedProcessE=null;\n        }\n        if (queueL.length > 0) {\n          if (selectedProcessE === null) {\n            \n            setEjec(true);\n            count2 = 0;\n            setProgress(0);\n            selectedProcessE = queueL.shift();\n            console.log(\"entro aca\", ejec);\n          }\n        }\n\n        count1 += 1;\n\n        if (selectedProcessE !== null && selectedProcessE!==undefined) {\n          console.log(\"selec\",selectedProcessE);\n          if (count2 <= selectedProcessE.ejecutionTime) {\n            count2 += 1;\n          }\n          setProgress((prevProgress) =>\n            prevProgress > selectedProcessE.ejecutionTime ? 0 : prevProgress + 1\n          );\n\n     \n\n          if (count2 === selectedProcessE?.ejecutionTime) {\n            //positionP +=1;\n            //  console.log(\"entre 1\", queueL, selectedProcessE);\n            //\n            let menor = queueL[0].ejecutionTime;\n            let position = 0;\n  \n            queueL.map((item, index) => {\n              //console.log(\"mapitem\", item, queueL.length);\n              if (index + 1 < queueL.length) {\n                if (menor > queueL[index + 1].ejecutionTime) {\n                  menor = queueL[index + 1].ejecutionTime;\n                  position = queueL[index + 1].id;\n                }\n              }\n            });\n           // console.log(\"min\", menor, \"position\", position);\n\n//\n\n            count2 = 0;\n            if (queueL.length > 0) {\n              if(position === queueL[0].id){\n                          //   setStartOp(false);\n              queueT.push(selectedProcessE);\n              // console.log(\"saque de cola\")\n              selectedProcessE = queueL.shift();\n              setProgress(0);\n         \n              }else{\n                let aux3 = [];\n                let aux2 = [];\n                aux3 = queueL.filter((queuel) => queuel.id !== position);\n                aux2 = queueL.filter((queuel) => queuel.id === position);\n      \n                queueT.push(selectedProcessE);\n                selectedProcessE = aux2[0];\n                queueL = aux3;\n                aux3 = [];\n                aux2 = [];\n                setProgress(0);\n                console.log(\"aux2\", aux2);\n                console.log(\"aux3\", aux3);\n                console.log(\"queuel\", queueL);\n              \n               // queueL = [];\n                \n              }\n    \n            } else {\n              setProgress(0);\n              queueT.push(selectedProcessE);\n              selectedProcessE = null;\n              count2 = 0;\n              setProgress(0);\n              setEjec(false);\n            }\n          }\n        }\n  \n\n        setTime((prevTime) => prevTime + 1);\n\n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n\n  }, [start]);\n  console.log(\"selectProces\",selectedProcessE);\n  return (\n    <>\n      {option !== 0 && (\n        <>\n          {\" \"}\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton4}\n            style={{\n              width: 250,\n              marginTop: 0,\n              marginLeft: 0,\n              marginBottom: 10,\n            }}\n          >\n            Comenzar simulacion\n            <PlayCircleOutlineIcon />\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton5}\n            style={{\n              width: 250,\n              marginTop: 0,\n              marginLeft: 80,\n              marginBottom: 10,\n            }}\n          >\n            Detener simulacion\n            <StopIcon />\n          </Button>\n        </>\n      )}\n      {option === 0 && (\n        <>\n          {\" \"}\n          <Typography variant=\"h6\" component=\"h2\">\n            Algoritmo SJF (El trabajo mas corto)\n          </Typography>\n          <Typography paragraph></Typography>\n          <Typography paragraph>\n            Este algoritmo siempre prioriza los procesos más cortos primero\n            independientemente de su llegada y en caso de que los procesos sean\n            iguales utilizara el método FIFO anterior, es decir, el orden según\n            entrada. Este sistema tiene el riesgo de poner siempre al final de\n            la cola los procesos más largos por lo que nunca se ejecutarán, esto\n            se conoce como inanición.\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton1}\n            style={{\n              width: 170,\n              marginTop: 30,\n              marginLeft: 100,\n              marginBottom: 10,\n            }}\n          >\n            Cargar data aleatoria\n          </Button>\n          {/* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton2}\n            style={{\n              width: 170,\n              marginTop: 30,\n              marginLeft: 100,\n              marginBottom: 10,\n            }}\n          >\n            Cargar data elegida\n          </Button> */}\n        </>\n      )}\n      {option === 0 && <DataAleatoria />}\n      {/* {dataselected.map((item, index) => {\n        <Paper className={classes.paper}>ss</Paper>;\n      })} */}\n\n      {option === 1 && (\n        <Grid container spacing={2}>\n          <Grid item sm={3} xs={3} md={3} style={{ heigh: 1000 }}>\n            <Paper className={classes.paper}>Cola procesos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueC.length}\n                {\"      \"}\n                Promedio: {promedioEspera()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueC.length > 0 &&\n                    queueC.map((item, index) => (\n                      <>\n                        <>\n                          {\" \"}\n                          <Card key={item.id} className={classes.root}>\n                            <CardActionArea>\n                              <CardContent>\n                                <Typography\n                                  gutterBottom\n                                  variant=\"h5\"\n                                  component=\"h2\"\n                                >\n                                  {item.processName}\n                                </Typography>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  color=\"textSecondary\"\n                                  component=\"p\"\n                                >\n                                  Tb: {item.bloquedTime}\n                                  {\"     \"}\n                                  Te: {item?.waitTime}\n                                  {/* {\"      \"}\n                                  Te: {item.ejecutionTime} */}\n                                  {\"     \"}\n                                  Tc: {item.comingTime}\n                                </Typography>\n                              </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                              {/* <Button size=\"small\" color=\"primary\">\n                                <BlockIcon />\n                                Bloquear\n                              </Button> */}\n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                Tw: {item.waitTime}\n                              </Paper>\n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                T transcurrido: {time}\n                              </Paper>\n                            </CardActions>\n                          </Card>\n                          <Divider />\n                        </>\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n          <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Contadorde tiempo</Paper>\n\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                {time}\n              </Typography>\n            </Paper>\n            {selectedProcessE !== null && (\n              <>\n                {\" \"}\n                <Paper className={classes.paper}>\n                  <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                    Proceso en ejecucion{selectedProcessE?.processName}\n                    {\"    \"}\n                    Promedio: {Ejecucion()}\n                  </Typography>\n                </Paper>\n                <Divider />\n              </>\n            )}\n\n            {/* <Clock progress={progress} setProgress={setProgress}\n              time={time} setTime={setTime}\n            /> */}\n            {/* {startOp ? (\n              <Timer\n                time={time}\n                setTime={setTime}\n                start={start}\n                queueC={queueC}\n                queueL={queueL}\n                queueB={queueB}\n              />\n            ) : (\n              <CircularProgress />\n            )} */}\n            <Card className={classes.root}>\n              {startOp && selectedProcessE !== null ? (\n                <>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {selectedProcessE?.processName}\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        Tb: {selectedProcessE?.bloquedTime}\n                        {\"     \"}\n                        Tw: {selectedProcessE?.waitTime}\n                        {\"      \"}\n                        Te: {selectedProcessE?.ejecutionTime}\n                        {\"     \"}\n                        Tc: {selectedProcessE?.comingTime}\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>{\" \"}\n                  <CardActions>\n             \n                    <Paper className={classes.paper3}>\n                      {\" \"}\n                      {progress}/{selectedProcessE?.ejecutionTime}\n                    </Paper>\n                  </CardActions>\n                </>\n              ) : (\n                <></>\n              )}\n            </Card>\n            <Divider />\n\n            <Paper className={classes.paper}>\n              <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                Terminados {queueT.length}\n                {\"       \"}\n                Promedio: {terminados()}\n              </Typography>\n            </Paper>\n            <Divider />\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueT.length > 0 &&\n                    queueT.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n        <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Cola listos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueL.length}\n                {\"      \"}\n                Promedio: {Listos()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueL.length > 0 &&\n                    queueL.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                                <OfflinePinSharpIcon />\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                          <CardActions>\n                            {/* <Button size=\"small\" color=\"primary\">\n                            <BlockIcon />\n                            Bloquear\n                          </Button> */}\n                          </CardActions>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n","//import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Divider } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DataAleatoria from \"../Components/DataAleatoria\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n// import Modal from \"@material-ui/core/Modal\";\n// import Backdrop from \"@material-ui/core/Backdrop\";\n// import Fade from \"@material-ui/core/Fade\";\n// import TextField from \"@material-ui/core/TextField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport DoneOutlineIcon from \"@material-ui/icons/DoneOutline\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport AdjustIcon from \"@material-ui/icons/Adjust\";\nimport Timer from \"../Components/Timer\";\nimport OfflinePinSharpIcon from \"@material-ui/icons/OfflinePinSharp\";\n//import CircularProgress from '@material-ui/core/CircularProgress';\n//import DeleteIcon from \"@material-ui/icons/Delete\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    height: 200,\n  },\n  paper3: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #000\",\n    boxShadow: theme.shadows[6],\n    padding: theme.spacing(2, 4, 3),\n    height: 15,\n  },\n}));\nlet queueB = [];\nlet queueL = [];\nlet queueC = [];\nlet queueT = [];\n\n\n// let selectedProcessE = {\n//   processName: \"\",\n//   comingTime: 0,\n//   ejecutionTime: 0,\n//   bloquedTime: 0,\n//   waitTime: 0,\n// };\nlet selectedProcessE = null;\nlet positionP = 0;\nlet count1 = 0;\nlet count2 = 0;\nlet count3 = 0;\nlet count4 = 0;\nlet i = 10;\nlet sample = [];\nexport default function Fcfs() {\n  const classes = useStyles();\n\n  // const theme = useTheme();\n  const dataselected = useSelector((state) => state.dataselected);\n // console.log(\"dataselected\",dataselected);\n  const [option, setOption] = useState(0);\n  const [option2, setOption2] = useState(0);\n  const [option3, setOption3] = useState(0);\n  const [option4, setOption4] = useState(0);\n  const [time, setTime] = React.useState(0);\n  const [start, setStart] = useState(false);\n  const [startOp, setStartOp] = useState(true);\n  const [progress, setProgress] = React.useState(0);\n  const [progress2, setProgress2] = React.useState(0);\n  const [list, setList] = useState([]);\n  const [selectedProcess, setSelectedProcess] = React.useState(12);\n  const [ejec, setEjec] = useState(false);\n  const [quantum,setQuantum] = useState(3);\n  // console.log(\"dataselected\", dataselected);\n  // dataselected.map((item,index)=>{\n  //   console.log(\"item\",item);\n  // })\n\n  const handleButton1 = () => {\n    queueC = dataselected;\n    setTimeout(() => {\n      //setTime(time+1);\n\n      setOption(1);\n    }, 800);\n  };\n  const handleButton2 = () => {\n    setOption(2);\n  };\n\n  const handleButton4 = () => {\n    setStart(true);\n    // setStartOp(false);\n    // setTimeout(() => {\n    //   //setTime(time+1);\n    //   setStartOp(true);\n    // }, 500);\n    // setTime(time + 1);\n    // setProgress((prevProgress) =>\n    //   prevProgress >= selectedProcess ? 0 : prevProgress + 1\n    // );\n    //setProgress2((prevProgress2) => (prevProgress2 >= selectedProcess ? 0 : prevProgress2 + selectedProcess*0.1));\n    // if (setProgress === 0) {\n    //   setSelectedProcess(null);\n    // }\n\n    // const timer = setInterval(() => {\n    //   setTime(time+1);\n    // }, 1000);\n\n    // clearInterval(timer);\n  };\n  const handleButton5 = () => {\n    setStart(false);\n    setTime(0);\n    count1 = 0;\n    count2 = 0;\n    count3 = 0;\n    count4 = 0;\n    setOption2(1);\n\n    queueC = dataselected;\n    queueL = [];\n    queueB = [];\n    queueT = [];\n    selectedProcessE = null;\n    setEjec(false);\n    setTimeout(() => {\n      //setTime(time+1);\n      setOption2(0);\n      // queueL = dataselected;\n      //queueB= dataselected\n    }, 800);\n\n    //\n  };\n  const min = 1;\n  const max = 10;\n  // const min2 = 20;\n  // const max2 = 100;\n  function uno_a_tres() {\n    let n3 = 0;\n    // sea n100 un número del 1 al 100 y n3 el resultado de tu función\n    var n100 = Math.floor(Math.random() * 100 + 1);\n\n    if (n100 <= 25) {\n      n3 = 1;\n    } else if (n100 <= 75) {\n      n3 = 2;\n    } else {\n      n3 = 3;\n    }\n    return n3;\n  }\n  function promedioEspera() {\n    let promedio = 0;\n    queueC.map((item, index) => {\n      promedio += item.waitTime - time;\n    });\n    if (queueC.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueC.length).toFixed(2);\n    }\n  }\n  function Listos() {\n    let promedio = 0;\n    queueL.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueL.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueL.length).toFixed(2);\n    }\n  }\n  function bloqueo() {\n    let promedio = 0;\n    queueB.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueB.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueB.length).toFixed(2);\n    }\n  }\n  function nuevosProcesos() {\n    let promedio = 0;\n    queueC.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueC.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueC.length - 2, 5).toFixed(2);\n    }\n  }\n  function terminados() {\n    let promedio = 0;\n    queueT.map((item, index) => {\n      promedio += item.waitTime;\n    });\n    if (queueT.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueT.length).toFixed(2);\n    }\n  }\n  function Ejecucion() {\n    let promedio = 0;\n    queueT.map((item, index) => {\n      promedio += item.ejecutionTime;\n    });\n    if (queueT.length === 0) {\n      return 0;\n    } else {\n      return (promedio / queueT.length).toFixed(2);\n    }\n  }\n\n  function createData(\n    id,\n    processName,\n    waitTime,\n    ejecutionTime,\n    bloquedTime,\n    comingTime\n  ) {\n    return {\n      id,\n      processName,\n      waitTime,\n      ejecutionTime,\n      bloquedTime,\n      comingTime,\n    };\n  }\n  React.useEffect(() => {\n    // queueC = dataselected;\n    if (start === true) {\n      const timer = setInterval(() => {\n        // setTime(time + 1);\n        //setStartOp(true);\n        // let prob = Math.floor(Math.random() * (max2 - min2)) + min2;\n        // if (prob > 80) {\n\n        //     let con1 = Math.floor(Math.random() * (max - min)) + min;\n        //     let con2 = Math.floor(Math.random() * (max - min)) + min;\n        //     let con3 = Math.floor(Math.random() * (max - min)) + min;\n        //     let con4 = Math.floor(Math.random() * (max - min)) + min;\n        //     queueC.push([`P${i + 1}`, con1, con2, con3, con4]);\n\n        // }\n        let prob = uno_a_tres();\n        if (prob === 1) {\n          let con2 = Math.floor(Math.random() * (max - min)) + min;\n          let con1 =\n            Math.floor(Math.random() * (count1 + 10 - count1 + 3)) + count1 + 2;\n          let con3 = Math.floor(Math.random() * (max - min)) + min;\n          let con4 = Math.floor(Math.random() * (max - min)) + min;\n          i += 1;\n          sample.push([`P${queueC.length + 1}`, con1, con2, con3, con4]);\n          queueC.push(createData(queueC.length, ...sample[0]));\n          sample = [];\n        }\n\n        if (queueC.length > 0) {\n          let queueAux = [];\n          let queueAux2 = [];\n          //  setData(noverades?.data.filter((item) => item.id != deleteId));\n          //   setList(queueC?.filter((item) => item.waitTime === count1));\n          ///  console.log(\" antes de asignar queueC\", queueC.length,\"queueuAux\", queueAux.length,\"queue L\", queueL.length,\"queueuAux 2\", queueAux2.length,);\n\n          queueAux = queueC.filter((queuec) => queuec.waitTime !== count1);\n          queueAux2 = queueC.filter((queuec) => queuec.waitTime === count1);\n          queueC = queueAux;\n\n          //  queueL+=queueAux;\n          queueAux2.map((item, index) => {\n            // console.log(\"entre a map\");\n            queueL.push(item);\n          });\n\n          //  console.log(\"queueC\", queueC.length,\"queueuAux\", queueAux.length,\"queue L\", queueL.length,\"queueuAux 2\", queueAux2.length,);\n        }\n\n        if (queueL.length > 0) {\n          // console.log(\"entre a guardar sele\",ejec,selectedProcessE);\n          if (selectedProcessE === null) {\n            setEjec(true);\n            count2 = 0;\n            setProgress(0);\n            selectedProcessE = queueL.shift();\n            console.log(\"entro aca\", ejec);\n          }\n        }\n\n        count1 += 1;\n\n        if (selectedProcessE !== null) {\n          if (count2 <= selectedProcessE.ejecutionTime) {\n            count2 += 1;\n          }\n          setProgress((prevProgress) =>\n            prevProgress > selectedProcessE.ejecutionTime ? 0 : prevProgress + 1\n          );\n        }\n        //   setProgress2((prevProgress2) => (prevProgress2 >= selectedProcess ? 0 : prevProgress2 + selectedProcess*0.1));\n        // if (progress === 0) {\n        //   setSelectedProcess(null);\n        // }\n\n        setTime((prevTime) => prevTime + 1);\n        // console.log(\"count1\", count1);\n        // console.log(selectedProcessE.processName,\"times ejecution\",selectedProcessE.ejecutionTime,\"progress\",progress,\"time\",time);\n        if (selectedProcess !== null) {\n          // console.log(\"selectedejection/count2\",selectedProcessE.ejecutionTime,count2);\n\n          if(count2 === quantum && count2+1 <= selectedProcessE?.ejecutionTime){\n            //ejecTime\n            // queueB.push(selectedProcessE);\n            // selectedProcessE.ejecTime = selectedProcessE.ejecutionTime-count2;\n            // selectedProcessE =queueL.shift();\n            // count2=0;\n            // setProgress(0);\n            selectedProcessE.ejecTime += selectedProcessE.ejecutionTime-count2;\n            selectedProcessE.ejecutionTime = selectedProcessE.ejecutionTime-count2;\n            queueL.push(selectedProcessE);\n            \n            selectedProcessE = queueL.shift();\n            count2=0;\n            setProgress(0);\n            \n          }\n          if(count2 ===quantum && count2 === selectedProcessE?.ejecutionTime){\n            if (count2 === selectedProcessE?.ejecutionTime) {\n              //positionP +=1;\n              //  console.log(\"entre 1\", queueL, selectedProcessE);\n  \n              count2 = 0;\n              if (queueL.length > 0) {\n                //   setStartOp(false);\n                queueT.push(selectedProcessE);\n                // console.log(\"saque de cola\")\n                selectedProcessE = queueL.shift();\n                setProgress(0);\n                //  console.log(\"entre 2\", queueL, selectedProcessE);\n                // setTimeout(() => {\n                //   //setTime(time+1);\n                //   setOption2(0);\n                // }, 800);\n              } else {\n                setProgress(0);\n                queueT.push(selectedProcessE);\n                selectedProcessE = null;\n                count2 = 0;\n                setProgress(0);\n                setEjec(false);\n              }\n            }\n          }\n          if(count2 <quantum && count2 === selectedProcessE?.ejecutionTime){\n            if (count2 === selectedProcessE?.ejecutionTime) {\n              //positionP +=1;\n              //  console.log(\"entre 1\", queueL, selectedProcessE);\n  \n              count2 = 0;\n              if (queueL.length > 0) {\n                //   setStartOp(false);\n                queueT.push(selectedProcessE);\n                // console.log(\"saque de cola\")\n                selectedProcessE = queueL.shift();\n                setProgress(0);\n                //  console.log(\"entre 2\", queueL, selectedProcessE);\n                // setTimeout(() => {\n                //   //setTime(time+1);\n                //   setOption2(0);\n                // }, 800);\n              } else {\n                setProgress(0);\n                queueT.push(selectedProcessE);\n                selectedProcessE = null;\n                count2 = 0;\n                setProgress(0);\n                setEjec(false);\n              }\n            }\n          }\n      \n        }\n        \n      }, 1000);\n      return () => {\n        clearInterval(timer);\n      };\n    }\n    //  console.log(\"Dataselected\", dataselected, \"cola\", queueC);\n    // if (start === true) {\n    // setProgress(selectedProcess)\n\n    //setProgress((prevProgress) => (prevProgress >= 10 ? 0 : prevProgress + 10));\n\n    // }\n    // const timer = setInterval(() => {\n    //   setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 10));\n    // }, 800);\n  }, [start]);\n  const handleChangeQ = (event) => {\n    setQuantum(event.target.value);\n  };\n  const handleButtonBlock =()=>{\n\n    selectedProcessE.bloquedTime=-1;\n  }\n  return (\n    <>\n      {option !== 0 && (\n        <>\n          {\" \"}\n          <Grid container spacing={2}>\n            <Grid item sm={3} xs={3} md={3}>\n              <TextField\n                type=\"number\"\n                pattern=\"[0-9]{0,13}\"\n                id=\"filled-basic\"\n                label=\"Quantum\"\n                variant=\"filled\"\n                style={{ width: 250 }}\n                onChange={handleChangeQ}\n              />\n            </Grid>\n            <Grid item sm={3} xs={3} md={3}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleButton4}\n                style={{\n                  width: 250,\n                  marginTop: 0,\n                  marginLeft: 0,\n                  marginBottom: 10,\n                }}\n              >\n                Comenzar simulacion\n                <PlayCircleOutlineIcon />\n              </Button>\n            </Grid>\n            <Grid item sm={3} xs={3} md={3}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleButton5}\n                style={{\n                  width: 250,\n                  marginTop: 0,\n                  marginLeft: 80,\n                  marginBottom: 10,\n                }}\n              >\n                Detener simulacion\n                <StopIcon />\n              </Button>\n            </Grid>{\" \"}\n            <Grid item sm={3} xs={3} md={3}>\n              <Button\n                variant=\"contained\"\n                disabled\n                color=\"primary\"\n                onClick={handleButton4}\n                style={{\n                  width: 250,\n                  marginTop: 0,\n                  marginLeft: 0,\n                  marginBottom: 10,\n                  backgroundColor: \"lightblue\",\n                  fontWeight:\"900\",\n                  color:\"black\"\n                }}\n              >\n                QUANTUM {quantum}\n              </Button>\n            </Grid>\n          </Grid>\n        </>\n      )}\n      {option === 0 && (\n        <>\n          <Typography variant=\"h6\" component=\"h2\">\n            Algoritmo RR (Round Robin)\n          </Typography>\n          <Typography paragraph></Typography>\n          <Typography paragraph>\n            Round Robin, este algoritmo de planificación es uno de los más\n            complejos y difíciles de implementar, asigna a cada proceso un\n            tiempo equitativo tratando a todos los procesos por igual y con la\n            misma prioridad. Este algoritmo es circular, volviendo siempre al\n            primer proceso una vez terminado con el último, para controlar este\n            método a cada proceso se le asigna un intervalo de tiempo llamado\n            quantum o cuanto (para definirlo se utiliza esta regla, el 80% de\n            los procesos tienen que durar menos tiempo que el quantum definido).\n            Pueden suceder dos casos con este método (como se aprecia en la\n            imagen inferior): El proceso es menor que el quantum: Al terminar\n            antes se planifica un nuevo proceso. El proceso es mayor que el\n            quantum: Al terminar el quantum se expulsa el proceso dando paso al\n            siguiente proceso en la lista. Al terminar la iteración se volverá\n            para terminar el primer proceso expulsado\n          </Typography>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton1}\n            style={{\n              width: 170,\n              marginTop: 30,\n              marginLeft: 100,\n              marginBottom: 10,\n            }}\n          >\n            Cargar data aleatoria\n          </Button>\n          {/* <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleButton2}\n            style={{\n              width: 170,\n              marginTop: 30,\n              marginLeft: 100,\n              marginBottom: 10,\n            }}\n          >\n            Cargar data elegida\n          </Button> */}\n        </>\n      )}\n      {option === 0 && <DataAleatoria />}\n      {/* {dataselected.map((item, index) => {\n        <Paper className={classes.paper}>ss</Paper>;\n      })} */}\n\n      {option === 1 && (\n        <Grid container spacing={2}>\n          <Grid item sm={3} xs={3} md={3} style={{ heigh: 1000 }}>\n            <Paper className={classes.paper}>Cola procesos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueC.length}\n                {\"      \"}\n                Promedio: {promedioEspera()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueC.length > 0 &&\n                    queueC.map((item, index) => (\n                      <>\n                        <>\n                          {\" \"}\n                          <Card key={item.id} className={classes.root}>\n                            <CardActionArea>\n                              <CardContent>\n                                <Typography\n                                  gutterBottom\n                                  variant=\"h5\"\n                                  component=\"h2\"\n                                >\n                                  {item.processName}\n                                </Typography>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  color=\"textSecondary\"\n                                  component=\"p\"\n                                >\n                                  Tb: {item.bloquedTime}\n                                  {\"     \"}\n                                  Te: {item?.waitTime}\n                                  {/* {\"      \"}\n                                  Te: {item.ejecutionTime} */}\n                                  {\"     \"}\n                                  Tc: {item.comingTime}\n                                </Typography>\n                              </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                              {/* <Button size=\"small\" color=\"primary\">\n                                <BlockIcon />\n                                Bloquear\n                              </Button> */}\n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                Tw: {item.waitTime}\n                              </Paper>\n                              <Paper className={classes.paper}>\n                                {\" \"}\n                                T transcurrido: {time}\n                              </Paper>\n                            </CardActions>\n                          </Card>\n                          <Divider />\n                        </>\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n          <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Contadorde tiempo</Paper>\n\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                {time}\n              </Typography>\n            </Paper>\n            {selectedProcessE !== null && (\n              <>\n                {\" \"}\n                <Paper className={classes.paper}>\n                  <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                    Proceso en ejecucion{selectedProcessE.processName}\n                    {\"    \"}\n                    Promedio: {Ejecucion()}\n\n                  </Typography>\n                </Paper>\n                <Divider />\n              </>\n            )}\n\n            {/* <Clock progress={progress} setProgress={setProgress}\n              time={time} setTime={setTime}\n            /> */}\n            {/* {startOp ? (\n              <Timer\n                time={time}\n                setTime={setTime}\n                start={start}\n                queueC={queueC}\n                queueL={queueL}\n                queueB={queueB}\n              />\n            ) : (\n              <CircularProgress />\n            )} */}\n            <Card className={classes.root}>\n              {startOp && selectedProcessE !== null ? (\n                <>\n                  <CardActionArea>\n                    <CardContent>\n                      <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {selectedProcessE.processName}\n                      </Typography>\n                      <Typography\n                        variant=\"subtitle1\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        Tb: {selectedProcessE.bloquedTime}\n                        {\"     \"}\n                        Tw: {selectedProcessE.waitTime}\n                        {\"      \"}\n                        Te: {selectedProcessE.ejecutionTime}\n                        {\"     \"}\n                        Tc: {selectedProcessE.comingTime}\n                      </Typography>\n                    </CardContent>\n                  </CardActionArea>{\" \"}\n                  <CardActions>\n                    {/* <Button size=\"small\" color=\"primary\" onClick={handleButtonBlock}>\n                      <BlockIcon />\n                      Bloquear\n                    </Button> */}\n                    <Paper className={classes.paper3}>\n                      {\" \"}\n                      {progress}/{selectedProcessE.ejecutionTime}{\"       \"}\n                      Quantum: {quantum}\n                    </Paper>\n                  </CardActions>\n                </>\n              ) : (\n                <></>\n              )}\n            </Card>\n            <Divider />\n\n            <Paper className={classes.paper}>\n              <Typography variant=\"h6\" component=\"h2\" color=\"primary\">\n                Terminados {queueT.length}\n                {\"       \"}\n                Promedio: {terminados()}\n              </Typography>\n            </Paper>\n            <Divider />\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueT.length > 0 &&\n                    queueT.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n\n          <Grid item sm={3} xs={3} md={3}>\n            <Paper className={classes.paper}>Cola listos</Paper>\n            <Paper className={classes.paper3}>\n              <Typography variant=\"h6\" component=\"h2\">\n                Total: {queueL.length}\n                {\"      \"}\n                Promedio: {Listos()}\n              </Typography>\n            </Paper>\n            <Paper className={classes.paper}>\n              {option2 === 0 ? (\n                <div>\n                  {queueL.length > 0 &&\n                    queueL.map((item, index) => (\n                      <>\n                        <Card key={item.id} className={classes.root}>\n                          <CardActionArea>\n                            <CardContent>\n                              <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"h2\"\n                              >\n                                {item.processName}\n                                <OfflinePinSharpIcon />\n                              </Typography>\n                              <Typography\n                                variant=\"subtitle1\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                Tb: {item.bloquedTime}\n                                {\"     \"}\n                                Tw: {item.waitTime}\n                                {\"      \"}\n                                Te: {item.ejecutionTime}\n                                {\"     \"}\n                                Tc: {item.comingTime}\n                              </Typography>\n                            </CardContent>\n                          </CardActionArea>\n                          <CardActions>\n                            {/* <Button size=\"small\" color=\"primary\">\n                            <BlockIcon />\n                            Bloquear\n                          </Button> */}\n                          </CardActions>\n                        </Card>\n                        <Divider />\n                      </>\n                    ))}\n                </div>\n              ) : (\n                <CircularProgress />\n              )}\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nimport { AutoSizer, Column, Table } from \"react-virtualized\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Typography from \"@material-ui/core/Typography\";\nconst styles = (theme) => ({\n  flexContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    boxSizing: \"border-box\",\n  },\n  table: {\n    \"& .ReactVirtualized__Table__headerRow\": {\n      flip: false,\n      paddingRight: theme.direction === \"rtl\" ? \"0 !important\" : undefined,\n    },\n  },\n  tableRow: {\n    cursor: \"pointer\",\n  },\n  tableRowHover: {\n    \"&:hover\": {\n      backgroundColor: theme.palette.grey[200],\n    },\n  },\n  tableCell: {\n    flex: 1,\n  },\n  noClick: {\n    cursor: \"initial\",\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper2: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n});\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    width: 500,\n    height: 600,\n  },\n}));\nlet process = {\n  processName: \"\",\n  waitTime: 0,\n  bloquedTime: 0,\n  ejecutionTime: 0,\n\n  statusProcess: 0,\n  comingTime: 0,\n  ejecTime:0,\n};\nlet sample = [];\nfunction ModalData(props) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  //const [currency, setCurrency] = React.useState(\"\");\n  const dispatch = useDispatch();\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const dataselected = useSelector(state => state.dataselected);\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleChange1 = (event) => {\n   // setCurrency(event.target.value);\n    process.processName = event.target.value;\n    //  console.log(\"procees\", process);\n  };\n  const handleChange2 = (event) => {\n    //setCurrency(event.target.value);\n    process.bloquedTime = event.target.value;\n    //   console.log(\"procees\", process);\n  };\n  const handleChange3 = (event) => {\n    //setCurrency(event.target.value);\n    process.ejecutionTime = event.target.value;\n    //console.log(\"procees\", process);\n  };\n  const handleChange4 = (event) => {\n    //setCurrency(event.target.value);\n    process.waitTime = event.target.value;\n    //  console.log(\"procees\", process);\n  };\n  const handleChange5 = (event) => {\n   // setCurrency(event.target.value);\n    process.comingTime = event.target.value;\n    //  console.log(\"procees\", process);\n  };\n  const handleButton = () => {\n    props.setLoading(true);\n   // sample.push(process);\n   if(dataselected.length>0){\n  // sample = dataselected;\n     console.log(\"dataselecte mayor a vero antes\",dataselected,sample);\n     sample.push(process);\n     dispatch({ type: \"dataselected\", payload: sample });\n     console.log(\"dataselecte mayor a vero despuess\",dataselected,sample);\n     \n   }else{\n    sample.push(process);\n    dispatch({ type: \"dataselected\", payload: sample });\n    \n\n   }\n   \n    //console.log(\"sample\", sample);\n    //props.setLoading(false);\n    handleClose();\n  };\n  console.log(\"dataselecte mayor a vero antes\",dataselected,sample);\n  return (\n    <div>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleOpen}\n        style={{ width: 170, marginBottom: 10, marginRight: 15 }}\n      >\n        Agregar Proceso\n      </Button>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open}>\n          <div className={classes.paper}>\n            <h2 id=\"transition-modal-title\">Configurar proceso</h2>\n            <p id=\"transition-modal-description\">Rellenar datos</p>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n              {/* <TextField id=\"standard-basic\" label=\"Standard\" /> */}\n\n              <Grid item sm={6} xs={6} md={6} style={{ marginLeft: 40 }}>\n                <TextField\n                  id=\"filled-basic\"\n                  label=\"Nombre del proceso\"\n                  variant=\"filled\"\n                  style={{ width: 300 }}\n                  onChange={handleChange1}\n                />\n                <TextField\n                type=\"number\"\n                  id=\"filled-basic\"\n                  label=\"Tiempo de bloqueo\"\n                  variant=\"filled\"\n                  style={{ width: 300 }}\n                  onChange={handleChange2}\n                />\n                <TextField\n                type=\"number\"\n                  id=\"filled-basic\"\n                  label=\"Tiempo de ejecucion\"\n                  variant=\"filled\"\n                  style={{ width: 300 }}\n                  onChange={handleChange3}\n                />\n                <TextField\n                type=\"number\"\n                  id=\"filled-basic\"\n                  label=\"Tiempo de espera\"\n                  variant=\"filled\"\n                  style={{ width: 300 }}\n                  onChange={handleChange4}\n                />\n                <TextField\n                type=\"number\"\n                  id=\"filled-basic\"\n                  label=\"Tiempo de llegada\"\n                  variant=\"filled\"\n                  style={{ width: 300 }}\n                  onChange={handleChange5}\n                />\n              </Grid>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleButton}\n                style={{ width: 170, marginTop: 80, marginLeft: 100 }}\n              >\n                Agregar\n              </Button>\n            </form>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\nclass MuiVirtualizedTable extends React.PureComponent {\n  static defaultProps = {\n    headerHeight: 48,\n    rowHeight: 48,\n  };\n\n  getRowClassName = ({ index }) => {\n    const { classes, onRowClick } = this.props;\n\n    return clsx(classes.tableRow, classes.flexContainer, {\n      [classes.tableRowHover]: index !== -1 && onRowClick != null,\n    });\n  };\n\n  cellRenderer = ({ cellData, columnIndex }) => {\n    const { columns, classes, rowHeight, onRowClick } = this.props;\n    return (\n      <TableCell\n        component=\"div\"\n        className={clsx(classes.tableCell, classes.flexContainer, {\n          [classes.noClick]: onRowClick == null,\n        })}\n        variant=\"body\"\n        style={{ height: rowHeight }}\n        align={\n          (columnIndex != null && columns[columnIndex].numeric) || false\n            ? \"right\"\n            : \"left\"\n        }\n      >\n        {cellData}\n      </TableCell>\n    );\n  };\n\n  headerRenderer = ({ label, columnIndex }) => {\n    const { headerHeight, columns, classes } = this.props;\n\n    return (\n      <TableCell\n        component=\"div\"\n        className={clsx(\n          classes.tableCell,\n          classes.flexContainer,\n          classes.noClick\n        )}\n        variant=\"head\"\n        style={{ height: headerHeight }}\n        align={columns[columnIndex].numeric || false ? \"right\" : \"left\"}\n      >\n        <span>{label}</span>\n      </TableCell>\n    );\n  };\n\n  render() {\n    const { classes, columns, rowHeight, headerHeight, ...tableProps } =\n      this.props;\n    return (\n      <AutoSizer>\n        {({ height, width }) => (\n          <Table\n            height={height}\n            width={width}\n            rowHeight={rowHeight}\n            gridStyle={{\n              direction: \"inherit\",\n            }}\n            headerHeight={headerHeight}\n            className={classes.table}\n            {...tableProps}\n            rowClassName={this.getRowClassName}\n          >\n            {columns.map(({ dataKey, ...other }, index) => {\n              return (\n                <Column\n                  key={dataKey}\n                  headerRenderer={(headerProps) =>\n                    this.headerRenderer({\n                      ...headerProps,\n                      columnIndex: index,\n                    })\n                  }\n                  className={classes.flexContainer}\n                  cellRenderer={this.cellRenderer}\n                  dataKey={dataKey}\n                  {...other}\n                />\n              );\n            })}\n          </Table>\n        )}\n      </AutoSizer>\n    );\n  }\n}\n\nMuiVirtualizedTable.propTypes = {\n  classes: PropTypes.object.isRequired,\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      dataKey: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      numeric: PropTypes.bool,\n      width: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  headerHeight: PropTypes.number,\n  onRowClick: PropTypes.func,\n  rowHeight: PropTypes.number,\n};\n\nconst VirtualizedTable = withStyles(styles)(MuiVirtualizedTable);\n\n// ---\n\n// function createData(id, name, tw, te, tb, tc) {\n//   return { id, name, tw, te, tb, tc };\n// }\n\n// const rows = [];\n\n// for (let i = 0; i < 200; i += 1) {\n//   const randomSelection = sample[Math.floor(Math.random() * sample.length)];\n//   rows.push(createData(i, ...randomSelection));\n// }\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height,\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\nexport default function TableData() {\n  const { height, width } = useWindowDimensions();\n  //const classes = useStyles();\n  const dataselected = useSelector((state) => state.dataselected);\n // console.log(\"data selected\", dataselected);\n  const [loading, setLoading] = useState(false);\n  return (\n    <>\n      <Grid container spacing={2}>\n        <Grid item sm={1} xs={1} md={1}></Grid>\n        <Grid item sm={6} xs={6} md={6}>\n          <Typography\n            style={{\n              width: width * 0.5,\n              marginLeft: width * 0.1,\n              marginRight: width * 0.1,\n            }}\n            variant=\"h6\"\n            component=\"h2\"\n          >\n            Data para simular\n          </Typography>\n          <Typography paragraph></Typography>\n          <Paper\n            style={{\n              height: height - 300,\n              width: width * 0.5,\n              marginLeft: width * 0.1,\n              marginRight: width * 0.1,\n            }}\n          >\n            {\n            loading === false &&\n           true\n             ? (\n              <VirtualizedTable\n                rowCount={dataselected.length}\n                rowGetter={({ index }) => dataselected[index]}\n                columns={[\n                  {\n                    width: width * 0.25,\n                    label: \"Nombre\",\n                    dataKey: \"processName\",\n                  },\n                  {\n                    width: width * 0.25,\n                    label: \"Tiempo de espera\",\n                    dataKey: \"waitTime\",\n                    numeric: true,\n                  },\n                  {\n                    width: width * 0.25,\n                    label: \"Tiempo de ejecucion\",\n                    dataKey: \"ejecutionTime\",\n                    numeric: true,\n                  },\n                  {\n                    width: width * 0.258,\n                    label: \"Tiempo de bloqueo\",\n                    dataKey: \"bloquedTime\",\n                    numeric: true,\n                  },\n                  {\n                    width: width * 0.25,\n                    label: \"Tiempo de llegada\",\n                    dataKey: \"comingTime\",\n                    numeric: true,\n                  },\n                ]}\n              />\n            ) : (\n              <></>\n              // agregar loader\n            )}\n          </Paper>\n        </Grid>\n\n        <Grid item sm={2} xs={2} md={2}>\n          <ModalData loading={loading} setLoading={setLoading} />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport CodeIcon from \"@material-ui/icons/Code\";\nimport DeveloperModeIcon from \"@material-ui/icons/DeveloperMode\";\nimport Home from \"./Home\";\nimport Fcfs from \"./Fcfs\";\nimport Sjf from \"./Sjf\";\nimport Rr from \"./Rr\";\nimport Data from \"./Data\";\nimport DataAleatoria from \"./DataAleatoria\";\nconst drawerWidth = 240;\nconst algorithm = [\"Inicio\", \"Algoritmo FCFS\", \"Algoritmo SJF\", \"Algoritmo RR\"];\n//const data = [\"Data FCFS\", \"Data SJF\", \"Data RR\"];\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n  const [selectedIndex, setSelectedIndex] = React.useState(\"Inicio\");\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const handleListItemClick = (event, index) => {\n    if (index === 4) {\n      setSelectedIndex(\"Data\");\n    } else {\n      if(index ===5){\n        setSelectedIndex(\"Data Aleatoria\");\n      }else{\n        setSelectedIndex(algorithm[index]);\n        //console.log(\"lista\", selectedIndex, index);\n      }\n    }\n    \n    \n  };\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Planificador de procesos\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <List>\n          {algorithm.map((text, index) => (\n            <ListItem\n              button\n              key={text}\n              selected={\n                selectedIndex === algorithm[index] && selectedIndex !== \"Data\"\n              }\n              onClick={(event) => handleListItemClick(event, index)}\n            >\n              <ListItemIcon>\n                {index === 0 ? <InboxIcon /> : <CodeIcon />}\n              </ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {/* <ListItem\n            button\n            key={\"Data\"}\n            selected={selectedIndex === \"Data\"}\n            onClick={(event) => handleListItemClick(event, 4)}\n          >\n            <ListItemIcon>{<DeveloperModeIcon />}</ListItemIcon>\n            <ListItemText primary={\"Data\"} />\n          </ListItem> */}\n          <ListItem\n            button\n            key={\"Data Aleatoria\"}\n            selected={selectedIndex === \"Data Aleatoria\"}\n            onClick={(event) => handleListItemClick(event, 5)}\n          >\n            <ListItemIcon>{<DeveloperModeIcon />}</ListItemIcon>\n            <ListItemText primary={\"Data Aleatoria\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {selectedIndex === \"Inicio\" && <Home/>}\n        {selectedIndex === \"Algoritmo FCFS\" && <Fcfs/>}\n        {selectedIndex === \"Algoritmo SJF\" && <Sjf/>}\n        {selectedIndex === \"Algoritmo RR\" && <Rr/>}\n        {/* {selectedIndex === \"Data\" && <Data/>} */}\n        {selectedIndex === \"Data Aleatoria\" && <DataAleatoria/>}\n        {/* <Home /> */}\n      </main>\n  \n    </div>\n      \n  );\n}\n","import React,{useEffect} from \"react\";\n\nimport AppBar3 from \"./AppBar3\";\nimport {useDispatch} from \"react-redux\";\nexport default function Board() {\n // const dataselected = useSelector(state => state.dataselected);\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch({type:\"dataselected\",payload:[]});\n  }, []);\n  return (\n    <>\n    {/* <AppBar2/> */}\n    <AppBar3/>\n    {/* <Container maxWidth=\"sm\"> <Button variant=\"contained\" color=\"primary\">\n    Planificador\n      </Button></Container> */}\n      {/* <Box color=\"text.primary\" clone>\n        <Button />\n      </Box> */}\n     \n    </>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport dataselected from \"./dataselected\";\nimport datalisto from \"./datalisto\";\nimport databloqueado from \"./databloqueado\";\nimport systemdata from \"./systemdata\";\nexport default combineReducers({\n    dataselected:dataselected,\n    datalisto:datalisto,\n    databloqueado:databloqueado,\n    systemdata:systemdata,\n    \n});\n","export default (state = { Dataselected: {} }, action) => {\n    switch (action.type) {\n      case \"dataselected\":\n        return action.payload;\n      default:\n        return state;\n    }\n  };","export default (state = { Datalisto: {} }, action) => {\n    switch (action.type) {\n      case \"datalisto\":\n        return action.payload;\n      default:\n        return state;\n    }\n  };","export default (state = { Databloqueado: {} }, action) => {\n    switch (action.type) {\n      case \"databloqueado\":\n        return action.payload;\n      default:\n        return state;\n    }\n  };","export default (state = { Systemdata: {} }, action) => {\n    switch (action.type) {\n      case \"systemdata\":\n        return action.payload;\n      default:\n        return state;\n    }\n  };","import {createStore} from \"redux\";\nimport { persistStore, persistReducer} from \"redux-persist\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\nimport rootReducer from \"../reducers\";\nimport storage from 'redux-persist/lib/storage'\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  stateReconciler: autoMergeLevel2, \n};\n\nconst pReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  pReducer\n);\nexport const persistor = persistStore(store);\n","import \"./App.css\";\nimport Board from \"./Components/Board\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\nimport { persistor, store } from \"./Redux/redux\";\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <div className=\"App\">\n          <Board />\n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}